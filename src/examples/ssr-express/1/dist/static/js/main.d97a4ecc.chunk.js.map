{"version":3,"sources":["examples/redux-thunk/1/redux/types/planets.js","examples/redux-thunk/1/redux/reducers/planets.js","examples/redux-thunk/1/redux/types/ui.js","examples/redux-thunk/1/redux/reducers/ui.js","examples/redux-thunk/1/init/rootReducer.js","examples/redux-thunk/1/init/middleware.js","examples/redux-thunk/1/init/store.js","examples/redux-thunk/1/redux/actions/ui.js","examples/redux-thunk/1/api/index.js","examples/redux-thunk/1/redux/actions/planets.js","examples/redux-thunk/1/redux/selectors/selectPlanetsWithFetchingState.js","examples/redux-thunk/1/components/planets.js","examples/redux-thunk/1/hooks/useFetchPlanets.js","examples/redux-thunk/1/pages/home.js","examples/redux-thunk/1/index.js","theme/DarkModeToggle/DarkModeToggle.tsx","index.js"],"names":["planetTypes","Object","freeze","FILL_PLANETS","initialState","data","uiTypes","START_FETCHING","STOP_FETCHING","isFetching","rootReducer","combineReducers","planets","state","action","type","payload","ui","createLogger","duration","collapsed","colors","title","error","prevState","nextState","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","composeEnhancers","compose","middleware","thunk","store","createStore","applyMiddleware","uiActions","startFetching","stopFetching","api","fetchPlanets","page","axios","get","fetchPlanetsAsync","async","dispatch","waait","results","console","message","selectPlanetsWithFetchingState","Planets","load","useDispatch","useFetchPlanets","useSelector","planetsJSX","Array","isArray","map","name","isPlanetsLoaded","length","onClick","Home","App","DarkModeToggle","theme","setTheme","useState","isSystem","setSystem","isVisible","setVisible","saveTheme","nextTheme","localStorage","setItem","document","documentElement","setAttribute","useEffect","initialTheme","persistedIsSystem","persistedTheme","getItem","detectOSTheme","detectInitialTheme","timerId","setTimeout","clearTimeout","darkModeToggleRef","createPortal","className","checked","onChange","size","getElementById","matchMedia","matches","osTheme","render"],"mappings":"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","file":"static/js/main.d97a4ecc.chunk.js","sourcesContent":["export const planetTypes = Object.freeze({\n    FILL_PLANETS: 'FILL_PLANETS',\n});\n","import { planetTypes } from '../types/planets';\n\nconst initialState = {\n  data: []\n};\n\nexport const planetsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case planetTypes.FILL_PLANETS:\n      return {\n          ...state,\n          data: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n","export const uiTypes = Object.freeze({\n    START_FETCHING: 'START_FETCHING',\n    STOP_FETCHING: 'STOP_FETCHING',\n});\n","import { uiTypes } from '../types/ui';\n\nconst initialState = {\n  isFetching: false\n};\n\nexport const uiReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case uiTypes.START_FETCHING:\n      return {\n          ...state,\n          isFetching: true\n      };\n\n    case uiTypes.STOP_FETCHING:\n      return {\n          ...state,\n          isFetching: false\n      };\n\n    default:\n      return state;\n  }\n};\n","// Core\nimport { combineReducers } from 'redux';\n\n// Reducers\nimport { planetsReducer as planets } from '../redux/reducers/planets';\nimport { uiReducer as ui } from '../redux/reducers/ui';\n\nexport const rootReducer = combineReducers({\n    planets,\n    ui\n});\n","// Core\nimport { compose } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nexport const logger = createLogger({\n    duration: true,\n    collapsed: true,\n    colors: {\n        title: (action) => {\n            return action.error ? 'firebrick' : 'deepskyblue';\n        },\n        prevState: () => '#1C5FAF',\n        action:    () => '#149945',\n        nextState: () => '#A47104',\n        error:     () => '#ff0005',\n    }\n});\n\nconst developmentEnvironment = process.env.NODE_ENV === 'development';\nconst devtools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\nconst composeEnhancers = developmentEnvironment && devtools ? devtools : compose;\n\nconst middleware = [thunk];\n\nif (developmentEnvironment) {\n    middleware.push(logger);\n}\n\nexport { composeEnhancers, middleware };\n","// Core\nimport { createStore, applyMiddleware } from 'redux';\n\n// Instruments\nimport { rootReducer } from './rootReducer';\nimport {\n    composeEnhancers,\n    middleware,\n } from './middleware';\n\nexport const store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(...middleware))\n);\n","// Other\nimport { uiTypes } from '../types/ui';\n\nconst startFetching = () => {\n    return {\n        type: uiTypes.START_FETCHING,\n    }\n}\n\nconst stopFetching = () => {\n    return {\n        type: uiTypes.STOP_FETCHING,\n    }\n}\n\nexport const uiActions = Object.freeze({\n    startFetching,\n    stopFetching\n})\n","import axios from 'axios';\n\nexport const api = Object.freeze({\n   fetchPlanets: (page = 1) => {\n        const data = axios.get(`https://swapi.dev/api/planets/?page=${page}`);\n\n        return data;\n   }\n});\n","// Core\nimport waait from 'waait';\n\n// Other\nimport { uiActions } from './ui';\nimport { planetTypes } from '../types/planets';\nimport { api } from '../../api';\n\nconst fillPlanets = (planets) => {\n    return {\n        type: planetTypes.FILL_PLANETS,\n        payload: planets,\n    }\n}\n\nexport const fetchPlanetsAsync = (page) => async (dispatch) => {\n    try {\n        dispatch(uiActions.startFetching());\n\n        const { data } = await api.fetchPlanets(page);\n\n        // Симуляция долгого запроса для демонстрации спиннера\n        await waait(2000);\n\n        dispatch(fillPlanets(data.results));\n    } catch (error) {\n        console.error(error.message);\n    } finally {\n        dispatch(uiActions.stopFetching());\n    }\n};\n","export const selectPlanetsWithFetchingState = (state) => {\n    const { data } = state.planets;\n    const { isFetching } = state.ui;\n\n    return {\n        planets: data,\n        isFetching\n    }\n};\n","// Core\nimport { useSelector } from 'react-redux';\n\n// Other\nimport { useFetchPlanets } from '../hooks/useFetchPlanets';\nimport { selectPlanetsWithFetchingState } from '../redux/selectors/selectPlanetsWithFetchingState';\n\nexport const Planets = () => {\n    const { load } = useFetchPlanets();\n    const { planets, isFetching } = useSelector(selectPlanetsWithFetchingState);\n\n    const planetsJSX = Array.isArray(planets) && planets.map(({ name }) => <li key={name} >{name}</li>);\n    const isPlanetsLoaded = Array.isArray(planets) && !planets.length && !isFetching;\n\n    return (\n        <section>\n            <h1>Планеты</h1>\n            <button onClick={load}>Загрузить список планет</button>\n            { isPlanetsLoaded && <p>Данные ещё не загружались!</p> }\n            { isFetching && <p>Загрузка планет...</p> }\n            { !isFetching && <ul>{planetsJSX}</ul> }\n        </section>\n    )\n};\n","// Core\nimport { useDispatch } from 'react-redux';\n\nimport {\n  fetchPlanetsAsync\n} from '../redux/actions/planets';\n\nexport const useFetchPlanets = () => {\n    const dispatch = useDispatch();\n    const load = () => dispatch(fetchPlanetsAsync());\n\n    return { load };\n};\n","// Core\nimport React from 'react';\n\n// Components\nimport { Planets } from '../components/planets';\n\nexport const Home = () => {\n  return (\n    <>\n      <Planets />\n    </>\n  )\n};\n","// Core\nimport React from 'react';\nimport { Provider } from 'react-redux';\n\n// Instruments\nimport { store } from './init/store';\n\n// Pages\nimport { Home } from './pages/home';\n\nconst App = () => {\n    return (\n        <Provider store = { store }>\n            <Home />\n        </Provider>\n    )\n};\n\nexport default App;\n","/* Core */\nimport { useState, useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport ReactDarkModeToggle from 'react-dark-mode-toggle';\n\n/* Instruments */\nimport './styles.scss';\n\nexport const DarkModeToggle = () => {\n    const [theme, setTheme] = useState<Theme>('light');\n    const [isSystem, setSystem] = useState(true);\n    const [isVisible, setVisible] = useState(false);\n\n    const saveTheme = (nextTheme: Theme) => {\n        localStorage.setItem('theme', nextTheme);\n        document.documentElement.setAttribute('data-theme', nextTheme);\n        setTheme(nextTheme);\n    };\n\n    const switchTheme = () => {\n        setSystem(false);\n\n        if (theme === 'light') {\n            saveTheme('dark');\n        } else if (theme === 'dark') {\n            saveTheme('light');\n        }\n    };\n\n    const toggleSystem = () => {\n        if (isSystem) {\n            setSystem(false);\n        } else {\n            setSystem(true);\n            setTheme(detectOSTheme());\n            localStorage.setItem('theme', 'system');\n        }\n    };\n\n    useEffect(() => {\n        (async () => {\n            const { initialTheme, persistedIsSystem } = detectInitialTheme();\n            saveTheme(initialTheme);\n            setSystem(persistedIsSystem);\n\n            // TODO: add listener for OS-wide theme change.\n        })();\n\n        const timerId = setTimeout(() => {\n            setVisible(true);\n        }, 0);\n\n        return () => {\n            clearTimeout(timerId);\n        };\n    }, []);\n\n    return (\n        darkModeToggleRef &&\n        createPortal(\n            <div className={`dark-mode-portal ${isVisible && 'visible'}`}>\n                <label className=\"system\">\n                    <input\n                        type=\"checkbox\"\n                        checked={isSystem}\n                        onChange={toggleSystem}\n                    />\n                    Системная\n                </label>\n                <ReactDarkModeToggle\n                    className=\"dark-mode-toggle\"\n                    onChange={switchTheme}\n                    checked={theme === 'dark'}\n                    size={50}\n                />\n            </div>,\n            darkModeToggleRef,\n        )\n    );\n};\n\n/* Helpers */\nconst darkModeToggleRef = document.getElementById('dark-mode-toggle');\n\nfunction detectOSTheme() {\n    if (!window.matchMedia) {\n        return 'dark'; // ? matchMedia method not supported\n    } else if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n        const osTheme = 'dark'; // ? OS theme identified as dark\n\n        document.documentElement.setAttribute('data-theme', osTheme);\n\n        return osTheme;\n    } else {\n        return 'light';\n    }\n}\n\nfunction detectInitialTheme() {\n    let initialTheme: Theme = 'light';\n\n    const persistedTheme = localStorage.getItem('theme') ?? 'system';\n    const persistedIsSystem = persistedTheme === 'system';\n\n    if (persistedTheme === 'dark') {\n        initialTheme = 'dark';\n    } else if (persistedIsSystem) {\n        initialTheme = detectOSTheme();\n    }\n\n    document.documentElement.setAttribute('data-theme', initialTheme);\n\n    return { initialTheme, persistedIsSystem };\n}\n\n/* Types */\ntype Theme = 'dark' | 'light';\n","/* Core */\nimport { render } from 'react-dom';\n\n/* Components */\nimport Example from './examples';\nimport { DarkModeToggle } from './theme/DarkModeToggle';\n\n/* Instruments */\nimport './theme/main.scss';\n\nrender(\n    <>\n        <Example />\n        <DarkModeToggle />\n    </>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}